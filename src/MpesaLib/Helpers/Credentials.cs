using System;
using System.IO;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace MpesaLib.Helpers
{

    /*
     M-Pesa Core authenticates a transaction by decrypting the security credentials. 
     Security credentials are generated by encrypting the base64 encoded initiator password with M-Pesa’s public key, 
     a X509 certificate.

    The algorithm for generating security credentials is as follows:

    Write the unencrypted password into a byte array.

    Encrypt the array with the M-Pesa public key certificate. Use the RSA algorithm, 
    and use PKCS #1.5 padding (not OAEP), and add the result to the encrypted stream.

    Convert the resulting encrypted byte array into a string using base64 encoding. 
    The resulting base64 encoded string is the security credential.        
         
    */


    /// <summary>
    /// Encrypt password helper class for MpesaLib
    /// </summary>
    public static class Credentials
    {
        /// <summary>
        /// Encrypts Mpesa API Security Credential password
        /// </summary>
        /// <param name="certificatePath"></param>
        /// <param name="password"></param>       
        /// <returns></returns>
        public static string EncryptPassword(string certificatePath, string password)
        {
           
            //get certificate data in bytes
            var data = ReadFile(certificatePath);

            //var rsa3 = new RSACryptoServiceProvider();

            X509Certificate2 x509 = new X509Certificate2(data);

            RSA publicprovider = (RSA)x509.PublicKey.Key;

#if !NETSTANDARD2_0
            var key1 = publicprovider.ToXmlString(false);              
#else
            var key1 = publicprovider.ToXmlString2(false);          
#endif          

            var data2 = Encoding.UTF8.GetBytes(password);         

            using (var rsa2 = new RSACryptoServiceProvider())
            {
                try
                {
                    rsa2.FromXmlString2(key1);
                    var encryptedData = rsa2.Encrypt(data2, false);
                    var base64Encrypted = Convert.ToBase64String(encryptedData);                                   
                    return base64Encrypted;
                }
                finally
                {
                    rsa2.PersistKeyInCsp = false;
                }
            }
        }

        //Reads a certificate file file.
        private static byte[] ReadFile(string fileName)
        {
            FileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            int size = (int)f.Length;
            byte[] data = new byte[size];
            size = f.Read(data, 0, size);
            f.Close();
            return data;
        }



    }
}
